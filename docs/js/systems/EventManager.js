/**
 * Classe EventManager - Gestionnaire des √©v√©nements de la ville
 */
class EventManager {
    constructor(city) {
        this.city = city;
        this.events = [];
        this.nextEventId = 1;
        this.randomEventTypes = this.initializeRandomEventTypes();
        this.dailyEventCount = { min: 4, max: 5 };
        this.scheduledEvents = []; // √âv√©nements programm√©s pour √™tre g√©n√©r√©s dans les heures suivantes
    }

    // Initialiser les types d'√©v√©nements al√©atoires
    initializeRandomEventTypes() {
        return [
            {
                id: 'citizen_donation',
                name: 'Don d\'un citoyen',
                description: 'Un citoyen g√©n√©reux fait un don √† la ville',
                type: 'random_event',
                icon: 'üí∞',
                weight: 60, // Probabilit√© relative r√©duite pour faire place aux √©v√©nements √† choix
                effects: {
                    gold: 5
                },
                messages: [
                    'Un marchand reconnaissant vous offre quelques pi√®ces d\'or.',
                    'Un citoyen satisfait fait un petit don √† la ville.',
                    'Vous trouvez une bourse perdue dans la rue.',
                    'Un aventurier de passage laisse une donation.',
                    'Les taxes locales rapportent un peu plus que pr√©vu.'
                ]
            },
            {
                id: 'merchant_citizen_conflict',
                name: 'Conflit entre un commer√ßant et un habitant',
                description: 'Un conflit √©clate entre un commer√ßant et un habitant au sujet d\'un produit d√©fectueux.',
                type: 'choice_event',
                icon: '‚öñÔ∏è',
                weight: 20,
                requiresChoice: true,
                messages: [
                    'Un commer√ßant refuse de rembourser un habitant pour un produit d√©fectueux. Le conflit s\'envenime et tous deux vous demandent de trancher.',
                    'Une dispute √©clate au march√© entre un marchand et un client. L\'affaire divise les habitants et n√©cessite votre intervention.',
                    'Un artisan refuse de reprendre un objet mal con√ßu. L\'acheteur exige justice. Votre d√©cision influencera votre r√©putation.'
                ],
                choices: [
                    {
                        id: 'help_citizen',
                        text: 'Soutenir l\'habitant',
                        description: 'Vous ordonnez au commer√ßant de rembourser et payez une compensation √† l\'habitant.',
                        effects: {
                            gold: -10,
                            reputation: 5
                        }
                    },
                    {
                        id: 'help_merchant',
                        text: 'Soutenir le commer√ßant', 
                        description: 'Vous soutenez le commer√ßant qui vous verse une somme en remerciement.',
                        effects: {
                            gold: 15,
                            reputation: -3
                        }
                    }
                ]
            },
            {
                id: 'festival_request',
                name: 'Demande pour organiser une f√™te',
                description: 'Les habitants demandent l\'organisation d\'une f√™te pour c√©l√©brer la prosp√©rit√© de la ville.',
                type: 'choice_event',
                icon: 'üéâ',
                weight: 20,
                requiresChoice: true,
                messages: [
                    'Une d√©l√©gation d\'habitants vous demande de financer une grande f√™te pour c√©l√©brer les r√©cents succ√®s de la ville.',
                    'Les citoyens souhaitent organiser un festival et demandent une contribution de la ville pour les festivit√©s.',
                    'Un groupe d\'artisans propose d\'organiser une c√©l√©bration publique si vous acceptez d\'en couvrir les frais.'
                ],
                choices: [
                    {
                        id: 'fund_festival',
                        text: 'Financer la f√™te',
                        description: 'Vous acceptez de financer la f√™te. Les habitants sont ravis et votre popularit√© augmente.',
                        effects: {
                            gold: -25,
                            reputation: 8
                        }
                    },
                    {
                        id: 'refuse_festival',
                        text: 'Refuser de financer',
                        description: 'Vous refusez de financer la f√™te. L\'argent reste dans les caisses mais les habitants sont d√©√ßus.',
                        effects: {
                            gold: 0,
                            reputation: -5
                        }
                    }
                ]
            }
        ];
    }

    // Cr√©er un nouvel √©v√©nement
    createEvent(type, title, description, additionalData = {}) {
        const event = {
            id: `event_${this.nextEventId++}`,
            type: type,
            title: title,
            description: description,
            timestamp: Date.now(),
            gameDay: this.city.day,
            gameTime: this.city.currentTime,
            formattedTime: this.city.getFormattedTime(),
            isRead: false,
            isAcknowledged: false,
            requiresChoice: false,
            choices: [],
            icon: this.getEventIcon(type),
            ...additionalData
        };

        this.events.unshift(event); // Ajouter en t√™te pour avoir les plus r√©cents en premier
        return event;
    }

    // Obtenir l'ic√¥ne selon le type d'√©v√©nement
    getEventIcon(type) {
        const icons = {
            construction: 'üèóÔ∏è',
            construction_complete: '‚úÖ',
            upgrade_complete: '‚¨ÜÔ∏è',
            expedition_complete: 'üè¥‚Äç‚ò†Ô∏è',
            expedition_success: 'üéâ',
            expedition_failure: 'üíÄ',
            research_complete: 'üî¨',
            adventurer_recruited: '‚öîÔ∏è',
            adventurer_dismissed: 'üëã',
            city_upgrade: 'üèõÔ∏è',
            resource_gain: 'üí∞',
            random_event: 'üé≤',
            danger: '‚ö†Ô∏è',
            celebration: 'üéä',
            trade: 'üõí',
            discovery: 'üîç'
        };
        return icons[type] || 'üì∞';
    }

    // Marquer un √©v√©nement comme lu
    markAsRead(eventId) {
        const event = this.events.find(e => e.id === eventId);
        if (event) {
            event.isRead = true;
            return true;
        }
        return false;
    }

    // G√©rer le choix d'un √©v√©nement
    makeEventChoice(eventId, choiceId) {
        const event = this.events.find(e => e.id === eventId);
        if (!event || !event.requiresChoice) {
            return { success: false, message: '√âv√©nement non trouv√© ou ne n√©cessite pas de choix' };
        }

        const choice = event.choices.find(c => c.id === choiceId);
        if (!choice) {
            return { success: false, message: 'Choix non valide' };
        }

        // Appliquer les effets du choix
        if (choice.effects) {
            this.city.resources.gain(choice.effects);
        }

        // Marquer l'√©v√©nement comme trait√© et acquitt√©
        event.isRead = true;
        event.isAcknowledged = true;
        event.choiceMade = choiceId;
        event.choiceText = choice.text;

        return {
            success: true,
            message: `Choix "${choice.text}" s√©lectionn√©`,
            effects: choice.effects || {}
        };
    }

    // Acquitter un √©v√©nement
    acknowledgeEvent(eventId) {
        const event = this.events.find(e => e.id === eventId);
        if (event) {
            event.isRead = true;
            event.isAcknowledged = true;
            return true;
        }
        return false;
    }

    // Acquitter tous les √©v√©nements
    acknowledgeAllEvents() {
        let count = 0;
        this.events.forEach(event => {
            if (!event.isAcknowledged) {
                event.isRead = true;
                event.isAcknowledged = true;
                count++;
            }
        });
        return count;
    }

    // Marquer tous les √©v√©nements comme lus
    markAllAsRead() {
        let count = 0;
        this.events.forEach(event => {
            if (!event.isRead) {
                event.isRead = true;
                count++;
            }
        });
        return count;
    }

    // Effacer les √©v√©nements lus
    clearReadEvents() {
        const initialCount = this.events.length;
        this.events = this.events.filter(event => !event.isRead || !event.isAcknowledged);
        return initialCount - this.events.length;
    }

    // Obtenir les statistiques des √©v√©nements
    getEventStats() {
        const unreadCount = this.events.filter(e => !e.isRead).length;
        const totalCount = this.events.length;
        const lastActivity = this.events.length > 0 ? this.events[0].formattedTime : '-';

        return {
            unreadCount,
            totalCount,
            lastActivity
        };
    }

    // Obtenir tous les √©v√©nements pour l'affichage
    getAllEvents() {
        return this.events.map(event => ({
            ...event,
            relativeTime: this.getRelativeTime(event.timestamp)
        }));
    }

    // Obtenir le temps relatif d'un √©v√©nement
    getRelativeTime(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        const minutes = Math.floor(diff / (1000 * 60));
        
        if (minutes < 1) return '√Ä l\'instant';
        if (minutes < 60) return `Il y a ${minutes}min`;
        
        const hours = Math.floor(minutes / 60);
        if (hours < 24) return `Il y a ${hours}h`;
        
        const days = Math.floor(hours / 24);
        return `Il y a ${days}j`;
    }

    // === √âV√âNEMENTS AL√âATOIRES ===

    // Programmer des √©v√©nements al√©atoires pour un nouveau jour
    generateDailyRandomEvents() {
        // D√©terminer le nombre d'√©v√©nements √† g√©n√©rer (entre 4 et 5)
        const eventCount = Math.floor(Math.random() * (this.dailyEventCount.max - this.dailyEventCount.min + 1)) + this.dailyEventCount.min;
        
        // Vider les √©v√©nements programm√©s pr√©c√©dents
        this.scheduledEvents = [];
        
        // Programmer les √©v√©nements √† des heures diff√©rentes de la journ√©e (√©viter minuit-6h)
        const possibleHours = [];
        for (let hour = 6; hour < 24; hour++) { // De 6h √† 23h
            for (let quarter = 0; quarter < 4; quarter++) { // Chaque quart d'heure
                possibleHours.push(hour * 60 + quarter * 15); // Convertir en minutes
            }
        }
        
        // M√©langer les heures disponibles
        for (let i = possibleHours.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [possibleHours[i], possibleHours[j]] = [possibleHours[j], possibleHours[i]];
        }
        
        // Programmer les √©v√©nements
        for (let i = 0; i < eventCount && i < possibleHours.length; i++) {
            const randomEvent = this.selectRandomEvent();
            if (randomEvent) {
                this.scheduledEvents.push({
                    eventType: randomEvent,
                    scheduledTime: possibleHours[i], // Temps en minutes depuis minuit
                    day: this.city.day
                });
            }
        }
        
        console.log(`${this.scheduledEvents.length} √©v√©nement(s) al√©atoire(s) programm√©(s) pour le jour ${this.city.day}`);
        return [];
    }
    
    // V√©rifier et d√©clencher les √©v√©nements programm√©s
    checkScheduledEvents() {
        if (!this.scheduledEvents || this.scheduledEvents.length === 0) return [];
        
        const triggeredEvents = [];
        const currentDay = this.city.day;
        const currentTime = this.city.currentTime; // Minutes depuis minuit
        
        // Trouver les √©v√©nements √† d√©clencher
        const eventsToTrigger = this.scheduledEvents.filter(scheduledEvent => 
            scheduledEvent.day === currentDay && 
            scheduledEvent.scheduledTime <= currentTime
        );
        
        // D√©clencher les √©v√©nements
        eventsToTrigger.forEach(scheduledEvent => {
            const event = this.createRandomEvent(scheduledEvent.eventType);
            triggeredEvents.push(event);
            
            // Afficher une popup pour l'√©v√©nement al√©atoire
            this.showRandomEventPopup(event);
        });
        
        // Retirer les √©v√©nements d√©clench√©s de la liste
        this.scheduledEvents = this.scheduledEvents.filter(scheduledEvent => 
            !(scheduledEvent.day === currentDay && scheduledEvent.scheduledTime <= currentTime)
        );
        
        return triggeredEvents;
    }

    // S√©lectionner un √©v√©nement al√©atoire bas√© sur les poids
    selectRandomEvent() {
        if (this.randomEventTypes.length === 0) return null;
        
        // Calculer le poids total
        const totalWeight = this.randomEventTypes.reduce((sum, event) => sum + event.weight, 0);
        
        // S√©lectionner un nombre al√©atoire
        let random = Math.random() * totalWeight;
        
        // Trouver l'√©v√©nement correspondant
        for (const eventType of this.randomEventTypes) {
            random -= eventType.weight;
            if (random <= 0) {
                return eventType;
            }
        }
        
        // Fallback - retourner le premier √©v√©nement
        return this.randomEventTypes[0];
    }

    // Cr√©er un √©v√©nement al√©atoire bas√© sur un type
    createRandomEvent(eventType) {
        // S√©lectionner un message al√©atoire
        const randomMessage = eventType.messages[Math.floor(Math.random() * eventType.messages.length)];
        
        // Pour les √©v√©nements sans choix, appliquer les effets imm√©diatement
        if (!eventType.requiresChoice && eventType.effects && this.city.resources) {
            Object.entries(eventType.effects).forEach(([resource, amount]) => {
                if (this.city.resources[resource] !== undefined) {
                    this.city.resources[resource] += amount;
                }
            });
        }
        
        // Cr√©er l'√©v√©nement
        const event = this.createEvent(
            eventType.type,
            eventType.name,
            randomMessage,
            {
                eventTypeId: eventType.id,
                effects: eventType.effects,
                isRandomEvent: true,
                requiresChoice: eventType.requiresChoice || false,
                choices: eventType.choices || [],
                originalEventType: eventType // Garder une r√©f√©rence pour les choix
            }
        );
        
        // Forcer l'ic√¥ne de l'√©v√©nement
        event.icon = eventType.icon;
        
        return event;
    }
    
    // Afficher une popup pour un √©v√©nement al√©atoire
    showRandomEventPopup(event) {
        // Cr√©er la popup s'il n'y en a pas d√©j√† une
        let popup = document.getElementById('random-event-popup');
        if (!popup) {
            popup = this.createRandomEventPopup();
            document.body.appendChild(popup);
        }
        
        // Remplir le contenu de la popup
        const popupTitle = popup.querySelector('.popup-title');
        const popupIcon = popup.querySelector('.popup-icon');
        const popupDescription = popup.querySelector('.popup-description');
        const popupEffects = popup.querySelector('.popup-effects');
        const popupFooter = popup.querySelector('.popup-footer');
        
        popupTitle.textContent = event.title;
        popupIcon.textContent = event.icon;
        popupDescription.textContent = event.description;
        
        // Si c'est un √©v√©nement avec choix, afficher les choix au lieu des effets
        if (event.requiresChoice && event.choices && event.choices.length > 0) {
            popupEffects.style.display = 'none';
            
            // Cr√©er les boutons de choix
            popupFooter.innerHTML = '';
            event.choices.forEach(choice => {
                const choiceBtn = document.createElement('button');
                choiceBtn.className = 'popup-btn choice-btn';
                choiceBtn.innerHTML = `
                    <div class="choice-text">${choice.text}</div>
                    <div class="choice-effects">${this.formatChoiceEffects(choice.effects)}</div>
                `;
                
                choiceBtn.addEventListener('click', () => {
                    this.handleEventChoice(event.id, choice.id);
                    popup.classList.remove('active');
                });
                
                popupFooter.appendChild(choiceBtn);
            });
            
            // Pas d'auto-fermeture pour les √©v√©nements √† choix
        } else {
            // √âv√©nement normal - afficher les effets et bouton continuer
            if (event.effects && Object.keys(event.effects).length > 0) {
                popupEffects.innerHTML = '';
                Object.entries(event.effects).forEach(([resource, amount]) => {
                    const effectDiv = document.createElement('div');
                    effectDiv.className = 'popup-effect';
                    const sign = amount >= 0 ? '+' : '';
                    const amountClass = amount >= 0 ? 'effect-amount positive' : 'effect-amount negative';
                    effectDiv.innerHTML = `<span class="effect-resource">${this.getResourceIcon(resource)} ${this.getResourceName(resource)}</span><span class="${amountClass}">${sign}${amount}</span>`;
                    popupEffects.appendChild(effectDiv);
                });
                popupEffects.style.display = 'block';
            } else {
                popupEffects.style.display = 'none';
            }
            
            // Bouton continuer standard
            popupFooter.innerHTML = '<button class="popup-btn popup-close">Continuer</button>';
            const closeBtn = popupFooter.querySelector('.popup-close');
            closeBtn.addEventListener('click', () => {
                popup.classList.remove('active');
            });
            
            // Auto-fermeture apr√®s 5 secondes
            setTimeout(() => {
                if (popup.classList.contains('active')) {
                    popup.classList.remove('active');
                }
            }, 5000);
        }
        
        // Afficher la popup
        popup.classList.add('active');
    }
    
    // Formater les effets d'un choix pour l'affichage
    formatChoiceEffects(effects) {
        if (!effects || Object.keys(effects).length === 0) return '';
        
        const formattedEffects = Object.entries(effects).map(([resource, amount]) => {
            const icon = this.getResourceIcon(resource);
            const sign = amount >= 0 ? '+' : '';
            const className = amount >= 0 ? 'positive' : 'negative';
            return `<span class="${className}">${icon} ${sign}${amount}</span>`;
        });
        
        return formattedEffects.join(' ');
    }
    
    // G√©rer le choix du joueur
    handleEventChoice(eventId, choiceId) {
        const result = this.processEventChoice(eventId, choiceId);
        if (result.success) {
            // Notifier le GameManager des changements de ressources
            if (window.gameManager) {
                window.gameManager.notifyResourcesChange();
                window.gameManager.notifyStateChange();
                window.gameManager.autoSave();
            }
            
            console.log(`Choix trait√©: ${result.choice.text} - ${result.message}`);
        } else {
            console.error('Erreur lors du traitement du choix:', result.message);
        }
    }
    
    // Cr√©er la structure HTML de la popup
    createRandomEventPopup() {
        const popup = document.createElement('div');
        popup.id = 'random-event-popup';
        popup.className = 'random-event-popup';
        popup.innerHTML = `
            <div class="random-event-content">
                <div class="popup-header">
                    <div class="popup-icon"></div>
                    <h3 class="popup-title"></h3>
                </div>
                <div class="popup-body">
                    <p class="popup-description"></p>
                    <div class="popup-effects"></div>
                </div>
                <div class="popup-footer">
                    <button class="popup-btn popup-close">Continuer</button>
                </div>
            </div>
        `;
        
        // Ajouter l'√©v√©nement de fermeture
        const closeBtn = popup.querySelector('.popup-close');
        closeBtn.addEventListener('click', () => {
            popup.classList.remove('active');
        });
        
        // Fermer en cliquant sur le fond
        popup.addEventListener('click', (e) => {
            if (e.target === popup) {
                popup.classList.remove('active');
            }
        });
        
        return popup;
    }
    
    // Obtenir l'ic√¥ne d'une ressource
    getResourceIcon(resource) {
        const icons = {
            gold: 'üí∞',
            population: 'üë•',
            materials: 'üî®',
            magic: '‚ú®',
            reputation: 'üèõÔ∏è'
        };
        return icons[resource] || 'üì¶';
    }
    
    // Obtenir le nom d'une ressource
    getResourceName(resource) {
        const names = {
            gold: 'Or',
            population: 'Population',
            materials: 'Mat√©riaux',
            magic: 'Magie',
            reputation: 'R√©putation'
        };
        return names[resource] || resource;
    }
    
    // Traiter le choix d'un joueur pour un √©v√©nement
    processEventChoice(eventId, choiceId) {
        const event = this.events.find(e => e.id === eventId);
        if (!event || !event.requiresChoice || !event.originalEventType) {
            return { success: false, message: '√âv√©nement ou choix invalide' };
        }
        
        const choice = event.originalEventType.choices.find(c => c.id === choiceId);
        if (!choice) {
            return { success: false, message: 'Choix invalide' };
        }
        
        // Appliquer les effets du choix
        if (choice.effects && this.city.resources) {
            Object.entries(choice.effects).forEach(([resource, amount]) => {
                if (this.city.resources[resource] !== undefined) {
                    this.city.resources[resource] += amount;
                }
            });
        }
        
        // Marquer l'√©v√©nement comme trait√©
        event.choiceMade = true;
        event.selectedChoice = choice;
        event.isAcknowledged = true;
        
        // Cr√©er un √©v√©nement de suivi pour indiquer le r√©sultat
        const followUpEvent = this.createEvent(
            'choice_result',
            `R√©sultat : ${event.title}`,
            choice.description,
            {
                originalEventId: eventId,
                choice: choice,
                effects: choice.effects
            }
        );
        followUpEvent.icon = '‚úÖ';
        
        return { 
            success: true, 
            message: 'Choix trait√© avec succ√®s',
            choice: choice,
            followUpEvent: followUpEvent
        };
    }

    // === √âV√âNEMENTS SP√âCIFIQUES ===

    // √âv√©nement de construction termin√©e
    onBuildingConstructionComplete(building) {
        const title = `Construction termin√©e : ${building.customName}`;
        const description = `Le b√¢timent "${building.customName}" (${building.buildingType.name}) a √©t√© construit avec succ√®s !`;
        
        let additionalInfo = '';
        if (building.buildingType.unlocksTab) {
            additionalInfo = ` Ce b√¢timent d√©bloque l'onglet "${building.buildingType.unlocksTab}".`;
        }

        return this.createEvent(
            'construction_complete',
            title,
            description + additionalInfo,
            {
                buildingId: building.id,
                buildingType: building.buildingType.name,
                district: building.buildingType.district
            }
        );
    }

    // √âv√©nement d'am√©lioration termin√©e
    onBuildingUpgradeComplete(building) {
        const title = `Am√©lioration termin√©e : ${building.customName}`;
        const description = `Le b√¢timent "${building.customName}" a √©t√© am√©lior√© au niveau ${building.level} !`;

        return this.createEvent(
            'upgrade_complete',
            title,
            description,
            {
                buildingId: building.id,
                buildingType: building.buildingType.name,
                newLevel: building.level
            }
        );
    }

    // √âv√©nement de recherche termin√©e
    onResearchComplete(upgrade) {
        const title = `Recherche termin√©e : ${upgrade.name}`;
        const description = `La recherche "${upgrade.name}" a √©t√© termin√©e avec succ√®s ! ${upgrade.description}`;

        return this.createEvent(
            'research_complete',
            title,
            description,
            {
                upgradeId: upgrade.id,
                upgradeName: upgrade.name
            }
        );
    }

    // √âv√©nement de mission termin√©e
    onMissionComplete(mission, results) {
        const success = results && results.success;
        const type = success ? 'expedition_success' : 'expedition_failure';
        const title = success ? `Mission r√©ussie : ${mission.name}` : `Mission √©chou√©e : ${mission.name}`;
        const description = results.message || 'Mission termin√©e.';

        return this.createEvent(
            type,
            title,
            description,
            {
                missionId: mission.id,
                missionName: mission.name,
                success: success,
                rewards: success ? mission.rewards : null,
                adventurers: mission.adventurers
            }
        );
    }

    // √âv√©nement de recrutement d'aventurier
    onAdventurerRecruited(adventurer) {
        const title = `Nouvel aventurier recrut√© : ${adventurer.name}`;
        const description = `${adventurer.name}, un ${adventurer.class} de niveau ${adventurer.level}, a rejoint votre guilde !`;

        return this.createEvent(
            'adventurer_recruited',
            title,
            description,
            {
                adventurerId: adventurer.id,
                adventurerName: adventurer.name,
                adventurerClass: adventurer.class,
                adventurerLevel: adventurer.level
            }
        );
    }

    // M√©thodes de s√©rialisation
    toJSON() {
        return {
            events: this.events,
            nextEventId: this.nextEventId,
            dailyEventCount: this.dailyEventCount,
            scheduledEvents: this.scheduledEvents
        };
    }

    static fromJSON(data, city) {
        const manager = new EventManager(city);
        if (data) {
            manager.events = data.events || [];
            manager.nextEventId = data.nextEventId || 1;
            manager.dailyEventCount = data.dailyEventCount || { min: 4, max: 5 };
            manager.scheduledEvents = data.scheduledEvents || [];
        }
        return manager;
    }
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = EventManager;
}